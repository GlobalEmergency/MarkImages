// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DeaRecord {
  id                    Int      @id @default(autoincrement())
  horaInicio           DateTime
  horaFinalizacion     DateTime
  correoElectronico    String
  nombre               String
  numeroProvisionalDea Int
  tipoEstablecimiento  String
  titularidadLocal     String
  usoLocal             String
  titularidad          String
  propuestaDenominacion String
  tipoVia              String
  nombreVia            String
  numeroVia            String?
  complementoDireccion String?
  codigoPostal         Int
  distrito             String
  latitud              Float
  longitud             Float
  horarioApertura      String
  aperturaLunesViernes Int
  cierreLunesViernes   Int
  aperturaSabados      Int
  cierreSabados        Int
  aperturaDomingos     Int
  cierreDomingos       Int
  vigilante24h         String
  foto1                String?
  foto2                String?
  descripcionAcceso    String?
  comentarioLibre      String?
  gmTipoVia            String?
  gmNombreVia          String?
  gmNumero             String?
  gmCp                 String?
  gmDistrito           String?
  gmLat                Float?
  gmLon                Float?
  defTipoVia           String?
  defNombreVia         String?
  defNumero            String?
  defCp                String?
  defDistrito          String?
  defLat               Float?
  defLon               Float?
  defCodDea            String?

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relaciones
  verificationSessions VerificationSession[]
  deaCodes            DeaCode[]

  @@map("dea_records")
}

model VerificationSession {
  id                    Int      @id @default(autoincrement())
  deaRecordId           Int      @map("dea_record_id")
  status                String   @default("in_progress")
  currentStep           String   @default("dea_info") @map("current_step")
  stepData              Json?    @map("step_data")
  originalImageUrl      String?  @map("original_image_url")
  croppedImageUrl       String?  @map("cropped_image_url")
  processedImageUrl     String?  @map("processed_image_url")
  secondImageUrl        String?  @map("second_image_url")
  secondCroppedImageUrl String?  @map("second_cropped_image_url")
  secondProcessedImageUrl String? @map("second_processed_image_url")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  completedAt           DateTime? @map("completed_at")

  // Relaciones
  deaRecord        DeaRecord        @relation(fields: [deaRecordId], references: [id])
  arrowMarkers     ArrowMarker[]
  processedImages  ProcessedImage[]

  @@map("verification_sessions")
}

model ArrowMarker {
  id                    Int      @id @default(autoincrement())
  verificationSessionId Int      @map("verification_session_id")
  imageNumber           Int      @map("image_number")
  startX                Float    @map("start_x")
  startY                Float    @map("start_y")
  endX                  Float    @map("end_x")
  endY                  Float    @map("end_y")
  arrowColor            String   @default("#dc2626") @map("arrow_color")
  arrowWidth            Int      @default(40) @map("arrow_width")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relaciones
  verificationSession VerificationSession @relation(fields: [verificationSessionId], references: [id])

  @@map("arrow_markers")
}

model ProcessedImage {
  id                    Int      @id @default(autoincrement())
  verificationSessionId Int      @map("verification_session_id")
  originalFilename      String   @map("original_filename")
  processedFilename     String   @map("processed_filename")
  imageType             String   @map("image_type")
  fileSize              Int      @map("file_size")
  dimensions            String
  createdAt             DateTime @default(now()) @map("created_at")

  // Relaciones
  verificationSession VerificationSession @relation(fields: [verificationSessionId], references: [id])

  @@map("processed_images")
}

// =====================================================
// ESTRUCTURA OPTIMIZADA - SISTEMA DE DIRECCIONES MADRID
// =====================================================

// 1. TABLA: DISTRITOS
model Distrito {
  id                 Int      @id @default(autoincrement())
  codigoDistrito     Int      @unique @map("codigo_distrito")
  codigoTexto        String   @map("codigo_texto")
  nombre             String
  nombreNormalizado  String   @map("nombre_normalizado") // Para búsquedas sin acentos
  shapeLength        Float?   @map("shape_length")
  shapeArea          Float?   @map("shape_area")
  fechaAlta          DateTime? @map("fecha_alta")
  fechaBaja          DateTime? @map("fecha_baja")
  observaciones      String?
  createdAt          DateTime @default(now()) @map("created_at")
  
  // Relaciones
  barrios            Barrio[]
  viaRangos          ViaRangoNumeracion[]
  direcciones        Direccion[]
  
  @@index([codigoDistrito])
  @@index([nombreNormalizado])
  @@map("distritos")
}

// 2. TABLA: BARRIOS
model Barrio {
  id                    Int      @id @default(autoincrement())
  distritoId            Int      @map("distrito_id")
  codigoBarrio          Int      @map("codigo_barrio")
  codigoDistritoBarrio  Int      @unique @map("codigo_distrito_barrio")
  numeroBarrio          Int      @map("numero_barrio")
  nombre                String
  nombreNormalizado     String   @map("nombre_normalizado")
  nombreMayuscula       String   @map("nombre_mayuscula")
  shapeLength           Float?   @map("shape_length")
  shapeArea             Float?   @map("shape_area")
  fechaAlta             DateTime? @map("fecha_alta")
  fechaBaja             DateTime? @map("fecha_baja")
  createdAt             DateTime @default(now()) @map("created_at")
  
  // Relaciones
  distrito              Distrito @relation(fields: [distritoId], references: [id], onDelete: Cascade)
  viaRangos             ViaRangoNumeracion[]
  direcciones           Direccion[]
  
  @@index([distritoId, codigoBarrio])
  @@index([nombreNormalizado])
  @@map("barrios")
}

// 3. TABLA: VIAS (CALLES, AVENIDAS, ETC.)
model Via {
  id                    Int      @id @default(autoincrement())
  codigoVia             Int      @unique @map("codigo_via")
  claseVia              String   @map("clase_via") // CALLE, AVENIDA, PLAZA, etc.
  particula             String?  // DE, DEL, etc.
  nombre                String
  nombreConAcentos      String   @map("nombre_con_acentos")
  nombreNormalizado     String   @map("nombre_normalizado") // Sin acentos, mayúsculas
  
  // Información de conectividad
  codigoViaInicio       Int?     @map("codigo_via_inicio")
  claseInicio           String?  @map("clase_inicio")
  particulaInicio       String?  @map("particula_inicio")
  nombreInicio          String?  @map("nombre_inicio")
  codigoViaFin          Int?     @map("codigo_via_fin")
  claseFin              String?  @map("clase_fin")
  particulaFin          String?  @map("particula_fin")
  nombreFin             String?  @map("nombre_fin")
  
  createdAt             DateTime @default(now()) @map("created_at")
  
  // Relaciones
  rangosNumeracion      ViaRangoNumeracion[]
  direcciones           Direccion[]
  
  @@index([codigoVia])
  @@index([claseVia])
  @@index([nombreNormalizado])
  @@index([codigoViaInicio])
  @@index([codigoViaFin])
  @@map("vias")
}

// 4. TABLA: RANGOS DE NUMERACIÓN POR VÍA, DISTRITO Y BARRIO
model ViaRangoNumeracion {
  id                Int      @id @default(autoincrement())
  viaId             Int      @map("via_id")
  distritoId        Int      @map("distrito_id")
  barrioId          Int?     @map("barrio_id")
  numeroImparMin    Int?     @map("numero_impar_min")
  numeroImparMax    Int?     @map("numero_impar_max")
  numeroParMin      Int?     @map("numero_par_min")
  numeroParMax      Int?     @map("numero_par_max")
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relaciones
  via               Via      @relation(fields: [viaId], references: [id], onDelete: Cascade)
  distrito          Distrito @relation(fields: [distritoId], references: [id])
  barrio            Barrio?  @relation(fields: [barrioId], references: [id])
  
  @@index([viaId, distritoId])
  @@index([numeroImparMin, numeroImparMax])
  @@index([numeroParMin, numeroParMax])
  @@index([viaId, distritoId, barrioId])
  @@map("via_rangos_numeracion")
}

// 5. TABLA PRINCIPAL: DIRECCIONES CON COORDENADAS GEOGRÁFICAS
model Direccion {
  id                    Int      @id @default(autoincrement())
  viaId                 Int      @map("via_id")
  distritoId            Int      @map("distrito_id")
  barrioId              Int?     @map("barrio_id")
  
  // Información de la dirección
  claseAplicacion       String?  @map("clase_aplicacion") // NUMERO, KILOMETRO
  numero                Int?
  calificador           String?  // BIS, DUPLICADO, etc.
  tipoPunto             String?  @map("tipo_punto") // PARCELA, EDIFICIO, etc.
  codigoPunto           Int?     @map("codigo_punto")
  codigoPostal          String?  @map("codigo_postal")
  
  // Coordenadas geográficas (FUNDAMENTAL para búsquedas espaciales)
  latitud               Float    // Convertido de formato DMS
  longitud              Float    // Convertido de formato DMS
  utmXEtrs              Float?   @map("utm_x_etrs") // Coordenadas UTM ETRS89
  utmYEtrs              Float?   @map("utm_y_etrs")
  utmXEd                Float?   @map("utm_x_ed") // Coordenadas UTM ED50
  utmYEd                Float?   @map("utm_y_ed")
  anguloRotulacion      Float?   @map("angulo_rotulacion")
  
  createdAt             DateTime @default(now()) @map("created_at")
  
  // Relaciones
  via                   Via      @relation(fields: [viaId], references: [id])
  distrito              Distrito @relation(fields: [distritoId], references: [id])
  barrio                Barrio?  @relation(fields: [barrioId], references: [id])
  
  // ÍNDICES CRÍTICOS PARA RENDIMIENTO
  @@index([viaId, numero])
  @@index([distritoId, barrioId])
  @@index([codigoPostal])
  @@index([latitud, longitud]) // Índice espacial básico
  @@index([viaId, distritoId, numero, codigoPostal])
  @@map("direcciones")
}

model DeaCode {
  id              Int      @id @default(autoincrement())
  distrito        Int
  codigoPostal    String   @map("codigo_postal")
  secuencial      Int
  codigoCompleto  String   @unique @map("codigo_completo")
  deaRecordId     Int?     @map("dea_record_id")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relación con DeaRecord
  deaRecord       DeaRecord? @relation(fields: [deaRecordId], references: [id])

  @@unique([distrito, secuencial])
  @@index([distrito])
  @@index([codigoCompleto])
  @@map("dea_codes")
}
